import { useEffect, useState, useRef } from 'react';
import mapboxgl from 'mapbox-gl';
import { useSectionStore } from '../lib/stores/useSectionStore';
import 'mapbox-gl/dist/mapbox-gl.css';

import {
  WORK_LOCATIONS,
  MAPBOX_ACCESS_TOKEN,
  INITIAL_VIEW_STATE,
  DEFAULT_MAP_STYLE,
  findLocationByCompany
} from '../lib/mapbox-config';

interface PopupInfo {
  longitude: number;
  latitude: number;
  company: string;
  city: string;
}

// Main MapGlobe component
export default function MapGlobe() {
  const [activeCompany, setActiveCompany] = useState('Stripe');
  const { activeSection } = useSectionStore();
  const mapContainerRef = useRef<HTMLDivElement>(null);
  const mapRef = useRef<mapboxgl.Map | null>(null);
  const markersRef = useRef<{[key: string]: mapboxgl.Marker}>({});
  const popupRef = useRef<mapboxgl.Popup | null>(null);
  const [mapLoaded, setMapLoaded] = useState(false);
  
  // Helper function for handling errors
  const [tokenError, setTokenError] = useState(false);
  
  // Initialize map when component mounts
  useEffect(() => {
    if (!mapContainerRef.current) return;
    
    try {
      // Set access token
      mapboxgl.accessToken = MAPBOX_ACCESS_TOKEN;
      
      const map = new mapboxgl.Map({
        container: mapContainerRef.current,
        style: DEFAULT_MAP_STYLE,
        center: [INITIAL_VIEW_STATE.longitude, INITIAL_VIEW_STATE.latitude],
        zoom: INITIAL_VIEW_STATE.zoom,
        projection: { name: 'globe' },
        attributionControl: false,
        interactive: true
      });
      
      map.on('load', () => {
        console.log('MapBox GL loaded successfully');
        setMapLoaded(true);
        
        // Add markers
        WORK_LOCATIONS.forEach(location => {
          // Create marker element
          const markerEl = document.createElement('div');
          markerEl.className = 'w-4 h-4 rounded-full border-2 bg-opacity-40 transition-all duration-300';
          markerEl.style.backgroundColor = location.color;
          markerEl.style.borderColor = location.color;
          
          // Create marker
          const marker = new mapboxgl.Marker({
            element: markerEl
          })
            .setLngLat(location.coordinates)
            .addTo(map);
          
          // Add click event
          marker.getElement().addEventListener('click', () => {
            flyToLocation(location.company, map);
          });
          
          // Store marker reference
          markersRef.current[location.company] = marker;
        });
        
        // Set initial company
        flyToLocation(activeCompany, map);
      });
      
      map.on('error', (e) => {
        console.error('MapBox GL error:', e);
        setTokenError(true);
      });
      
      // Add navigation controls
      const nav = new mapboxgl.NavigationControl({
        visualizePitch: true
      });
      map.addControl(nav, 'top-right');
      
      // Save map reference
      mapRef.current = map;
      
      // Clean up on unmount
      return () => {
        map.remove();
        mapRef.current = null;
      };
    } catch (error) {
      console.error('Error initializing MapBox GL:', error);
      setTokenError(true);
      return () => {};
    }
  }, []);
  
  // Function to fly to a location
  const flyToLocation = (company: string, map?: mapboxgl.Map) => {
    const mapInstance = map || mapRef.current;
    if (!mapInstance) return;
    
    // Find the matching location
    const location = findLocationByCompany(company);
    if (!location) return;
    
    setActiveCompany(company);
    
    // Reset all markers to default state
    Object.keys(markersRef.current).forEach(key => {
      const markerEl = markersRef.current[key].getElement();
      markerEl.className = 'w-4 h-4 rounded-full border-2 bg-opacity-40 transition-all duration-300';
      markerEl.style.backgroundColor = WORK_LOCATIONS.find(loc => loc.company === key)?.color || '#ccc';
      markerEl.style.borderColor = WORK_LOCATIONS.find(loc => loc.company === key)?.color || '#ccc';
      markerEl.style.boxShadow = 'none';
      markerEl.style.transform = 'scale(1)';
    });
    
    // Remove existing popup
    if (popupRef.current) {
      popupRef.current.remove();
      popupRef.current = null;
    }
    
    // Highlight active marker
    const activeMarker = markersRef.current[company];
    if (activeMarker) {
      const markerEl = activeMarker.getElement();
      markerEl.className = 'w-6 h-6 rounded-full border-2 bg-opacity-70 transition-all duration-300';
      markerEl.style.borderColor = '#ffffff';
      markerEl.style.boxShadow = `0 0 12px ${location.color}`;
      markerEl.style.transform = 'scale(1.5)';
    }
    
    // Add popup
    const popup = new mapboxgl.Popup({
      closeButton: false,
      className: 'map-popup',
      maxWidth: '200px',
      anchor: 'top'
    })
      .setLngLat(location.coordinates)
      .setHTML(`<div class="p-2">
                  <h3 class="font-bold text-sm text-secondary">${location.company}</h3>
                  <p class="text-xs text-text">${location.city}</p>
                </div>`)
      .addTo(mapInstance);
    
    popupRef.current = popup;
    
    // Fly to location
    mapInstance.flyTo({
      center: location.coordinates,
      zoom: 5,
      pitch: 45,
      bearing: -20,
      duration: 2000,
      essential: true
    });
  };
  
  // Watch for active section
  useEffect(() => {
    if (activeSection !== 'experience' && popupRef.current) {
      popupRef.current.remove();
      popupRef.current = null;
    }
  }, [activeSection]);
  
  // Update when active company changes from parent
  useEffect(() => {
    if (mapLoaded && activeSection === 'experience') {
      flyToLocation(activeCompany);
    }
  }, [activeCompany, mapLoaded, activeSection]);
  
  // If token error, show placeholder
  if (tokenError) {
    return (
      <div className="h-full flex items-center justify-center bg-card/80 rounded-lg">
        <div className="p-8 max-w-md text-center">
          <h3 className="text-lg font-medium text-text mb-2">Map Unavailable</h3>
          <p className="text-muted-foreground mb-4">
            There was an issue loading the interactive map. Please check your Mapbox access token.
          </p>
          <p className="text-sm text-muted-foreground">
            The map would display my work experience locations across the globe.
          </p>
        </div>
      </div>
    );
  }
  
  return (
    <div ref={mapContainerRef} className="w-full h-full rounded-lg overflow-hidden"></div>
  );
}